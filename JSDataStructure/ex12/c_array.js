// Generated by CoffeeScript 1.8.0
(function() {
  var CArray, myNums, numElements;

  CArray = function(numElements) {
    var i;
    this.dataStore = [];
    this.pos = 0;
    this.numElements = numElements;
    i = 0;
    while (i < this.numElements) {
      this.dataStore[i] = i;
      i++;
    }
  };

  CArray.prototype.insert = function(element) {
    return this.dataStore[this.pos++] = element;
  };

  CArray.prototype.toString = function() {
    var i, restr, v, _i, _len, _ref;
    restr = "";
    _ref = this.dataStore;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v = _ref[i];
      restr += v + " ";
      if (i > 0 && i % 10 === 0) {
        restr += "\n";
      }
    }
    return restr;
  };

  CArray.prototype.clear = function() {
    var i, v, _i, _len, _ref, _results;
    _ref = this.dataStore;
    _results = [];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      v = _ref[i];
      _results.push(this.dataStore[i] = 0);
    }
    return _results;
  };

  CArray.prototype.setData = function() {
    var i, _results;
    i = 0;
    _results = [];
    while (i < this.numElements) {
      this.dataStore[i] = Math.floor(Math.random() * (this.numElements + 1));
      _results.push(i++);
    }
    return _results;
  };

  CArray.prototype.swap = function(arr, index1, index2) {
    var tmp;
    tmp = arr[index1];
    arr[index1] = arr[index2];
    return arr[index2] = tmp;
  };

  CArray.prototype.bubbleSort = function() {
    var inner, numElements, outer, _results;
    numElements = this.dataStore.length;
    outer = numElements;
    _results = [];
    while (outer >= 2) {
      inner = 0;
      console.log("out ==> ", outer);
      console.log("outer - 1 ==> ", outer - 1);
      while (inner <= outer - 1) {
        console.log("@dataStore[inner + 1]", this.dataStore[inner + 1]);
        if (this.dataStore[inner] > this.dataStore[inner + 1]) {
          this.swap(this.dataStore, inner, inner + 1);
        }
        console.log(myNums.toString());
        console.log("");
        inner++;
      }
      _results.push(outer--);
    }
    return _results;
  };

  CArray.prototype.selectionSort = function() {
    var inner, min, outer, _results;
    outer = 0;
    _results = [];
    while (outer <= this.dataStore.length - 2) {
      min = outer;
      inner = outer + 1;
      _results.push((function() {
        var _results1;
        _results1 = [];
        while (inner <= this.dataStore.length - 1) {
          if (this.dataStore[inner] < this.dataStore[min]) {
            min = inner;
          }
          _results1.push(this.swap(this.dataStore, outer, min));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  numElements = 8;

  myNums = new CArray(numElements);

  myNums.setData();

  console.log(myNums.toString());

  console.log("");

  myNums.bubbleSort();

  console.log(myNums.toString());

}).call(this);

//# sourceMappingURL=c_array.js.map
